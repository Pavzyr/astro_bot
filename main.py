import calendar
import os
import sqlite3
import logging
import time
import requests

from datetime import datetime
from dotenv import load_dotenv
from yoomoney import Client, Quickpay

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext import (
    Updater,
    CommandHandler,
    CallbackContext,
    CallbackQueryHandler,
    MessageHandler,
    Filters
)


def start(update: Update, context: CallbackContext, msg_ex=False):
    if msg_ex:
        profile_list = registration_check(update.from_user)
    else:
        profile_list = registration_check(update.effective_user)

    if profile_list[0] in ('user', 'admin'):
        keyboard = [
            [InlineKeyboardButton("üÜì –ë–µ–∫—Ç–µ—Å—Ç", callback_data='backtest')],
            [InlineKeyboardButton("üîé –ü—Ä–æ–≥–Ω–æ–∑", callback_data='today')],
            [InlineKeyboardButton("üÜî –ü—Ä–æ—Ñ–∏–ª—å", callback_data='profile')],
            [InlineKeyboardButton("‚ùì INFO", callback_data='info')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        if msg_ex:
            update.edit_message_text('–ú–µ–Ω—é –±–æ—Ç–∞', reply_markup=reply_markup)
        else:
            update.message.reply_text('–ú–µ–Ω—é –±–æ—Ç–∞', reply_markup=reply_markup)
    else:
        keyboard = [
            [InlineKeyboardButton("‚ùì INFO", callback_data='info')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        register(context, update)
        update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –ü—Ä–µ–¥–ª–∞–≥–∞—é –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è c —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –±–æ—Ç–∞.', reply_markup=reply_markup)


def commands(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    command = query.data
    if command == "backtest_info":
        backtest_info(query)
    elif command == "prognosis_info":
        prognosis_info(query)
    elif command == "individual_info":
        individual_info(query)
    elif command == "backtest":
        query.edit_message_text("–í—ã–±–µ—Ä–∏—Ä–µ –¥–∞—Ç—É:", reply_markup=create_calendar())
    elif command == "buy":
        buy(query, update)
    elif command == "today":
        today(query, update)
    elif command == "menu":
        start(query, context, True)
    elif command == "profile":
        profile(query, update)
    elif command == "info":
        info(query)
    elif command == "pay_check":
        pay_check(query, update)
    elif command.startswith("pay_request-"):
        value = command.split('-')[1]
        profile_list = registration_check(update.effective_user)
        payment_code = f"bill||{datetime.now().strftime('%d.%m.%Y-%H:%M')}||{value}||{profile_list[2]}"
        payment_url = pay_url_generate(value, payment_code, profile_list[3])
        pay_button(query, payment_code, payment_url)
    elif command.startswith("bill"):
        conn = sqlite3.connect('admin_django/astro_db.db')
        c = conn.cursor()
        c.execute(
            'SELECT href, value FROM payments WHERE payment_code=?;',
            (command,)
        )
        payment_url = c.fetchone()
        value = payment_url[1]
        payment_url = payment_url[0]
        conn.close()
        pay_check_target(query, update, command, value, payment_url)
    elif command.startswith("calendar-day-"):
        backtest_after_date_recieve(query, update, command)
    elif command.startswith("change-month-"):
        page_of_calendar(command, query)
    elif command.startswith("delete_payment-"):
        label = command.replace('delete_payment-', '')
        delete_payment(query, label)


def menu(update, msg):
    keyboard = [
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='menu')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.edit_message_text(msg, reply_markup=reply_markup, parse_mode='HTML')


def registration_check(user):
    conn = sqlite3.connect('admin_django/astro_db.db')
    c = conn.cursor()
    c.execute('SELECT role, balance, expired, user_id FROM users WHERE user_id=?;', (user.id,))
    role = c.fetchone()
    if role is not None:
        return [role[0], role[1], role[2], role[3]]
    else:
        return ['unauthorized']


def create_calendar(year=None, month=None):
    if year is None:
        year = datetime.now().year
    if month is None:
        month = datetime.now().month
    keyboard = []
    row = [
        InlineKeyboardButton(
            f"{calendar.month_name[month]} {year}",
            callback_data="ignore"
            ),
        ]
    keyboard.append(row)
    row = []
    for day in ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]:
        row.append(InlineKeyboardButton(day, callback_data="ignore"))
    keyboard.append(row)
    month_calendar = calendar.monthcalendar(year, month)
    for week in month_calendar:
        row = []
        for day in week:
            if day == 0:
                row.append(InlineKeyboardButton(" ", callback_data="ignore"))
            else:
                row.append(InlineKeyboardButton(
                    str(day),
                    callback_data=f"calendar-day-{year}-{month}-{day}"
                    ))
        keyboard.append(row)
    row = []
    previous_month = month - 1 if month > 1 else 12
    previous_year = year if month > 1 else year - 1
    next_month = month + 1 if month < 12 else 1
    next_year = year if month < 12 else year + 1
    row.append(InlineKeyboardButton(
        "<- –ü—Ä–µ–¥. –º–µ—Å—è—Ü",
        callback_data=f"change-month-{previous_year}-{previous_month}"
        ))
    row.append(InlineKeyboardButton(
        "–°–ª–µ–¥. –º–µ—Å—è—Ü ->",
        callback_data=f"change-month-{next_year}-{next_month}"
        ))
    keyboard.append(row)
    row = []
    row.append(InlineKeyboardButton(
        "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='menu'
        ))
    keyboard.append(row)
    return InlineKeyboardMarkup(keyboard)


def page_of_calendar(command, query):
    parts = command.split('-')
    _, year, month = parts[1], parts[2], parts[3]
    query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
        reply_markup=create_calendar(int(year), int(month))
        )


def profile(query, update):
    profile_list = registration_check(update.effective_user)
    if profile_list[0] == 'user':
        keyboard = [
            [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='buy')],
            [InlineKeyboardButton("üÜì –ë–µ–∫—Ç–µ—Å—Ç", callback_data='backtest')],
            [InlineKeyboardButton("üîé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data='pay_check')],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='menu')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.edit_message_text(
            f'üë§ –í–∞—à ID - {profile_list[3]} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å) \nüí∞ –ë–∞–ª–∞–Ω—Å - {profile_list[1]} ‚ÇΩ.\n–û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞, –∏–ª–∏ —Å—Ç–∞–Ω—å—Ç–µ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∞—Å—Ç—Ä–æ–ø—Ä–æ–≥–Ω–æ–∑–∞.',
            reply_markup=reply_markup
            )
    elif profile_list[0] == 'admin':
        keyboard = [
            [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='buy')],
            [InlineKeyboardButton("üÜì –ë–µ–∫—Ç–µ—Å—Ç", callback_data='backtest')],
            [InlineKeyboardButton("üîé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data='pay_check')],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='menu')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.edit_message_text(
            f'üë§ –í–∞—à ID - {profile_list[3]} (–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä) \nüí∞ –ë–∞–ª–∞–Ω—Å - {profile_list[1]} ‚ÇΩ.',
            reply_markup=reply_markup
            )
    else:
        keyboard = [
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='menu')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.edit_message_text(
            '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ —Å –≤–∞—à–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!',
            reply_markup=reply_markup
            )


def register(context, update):
    user = update.effective_user
    conn = sqlite3.connect('admin_django/astro_db.db')
    c = conn.cursor()
    try:
        c.execute(
            'INSERT INTO users (user_id, username, first_name, last_name, role, balance, expired) VALUES (?, ?, ?, ?, "user", ?, ?)',
                  (user.id, user.username, user.first_name, user.last_name, '0', '0'))
        conn.commit()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è")
        send_messages(context, user_ids, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} {user.username} {user.first_name} {user.last_name} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è. (–°–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º)")
    except sqlite3.IntegrityError:
        pass
    finally:
        conn.close()


def buy(query, update):
    profile_list = registration_check(update.effective_user)
    conn = sqlite3.connect('admin_django/astro_db.db')
    c = conn.cursor()
    c.execute(
        'SELECT payment_code, value FROM payments WHERE user_id=? AND payment_status="0";',
        (profile_list[3],)
    )
    rows = c.fetchall()
    if len(rows) < 3:
        keyboard = [
            [InlineKeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ 10 ‚ÇΩ", callback_data='pay_request-10')],
            [InlineKeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ 750 ‚ÇΩ", callback_data='pay_request-750')],
            [InlineKeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ 4500 ‚ÇΩ", callback_data='pay_request-4500')],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='menu')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.edit_message_text(
            f'–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:',
            reply_markup=reply_markup
            )
    else:
        keyboard = [
            [InlineKeyboardButton("üîé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—ã", callback_data='pay_check')],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='menu')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.edit_message_text(
            f'–£ –í–∞—Å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ–ø–ª–∞—Ç—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Ö –∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –Ω–µ–Ω—É–∂–Ω—ã–µ:',
            reply_markup=reply_markup
            )


def backtest_after_date_recieve(query, update, command):
    da, _, year, month, day = command.split('-')[:5]
    date = datetime(int(year), int(month), int(day))
    if date.strftime('%d.%m.%Y') == datetime.now().strftime('%d.%m.%Y'):
        today(query, update)
    elif date.strftime('%d.%m.%Y') > datetime.now().strftime('%d.%m.%Y'):
        msg = '–§—É–Ω–∫—Ü–∏—è –±–µ–∫—Ç–µ—Å—Ç–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ª—å–∫–æ –∏—Å—Ç–æ—Ä–∏—é. '
        '–ü—Ä–æ–≥–Ω–æ–∑—ã –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.'
        menu(query, msg)
    else:
        conn = sqlite3.connect('admin_django/astro_db.db')
        c = conn.cursor()
        c.execute('SELECT text FROM data WHERE date=?;', (date.strftime('%d.%m.%Y'),))
        msg = c.fetchone()
        if msg is not None:
            msg = msg[0] 
        else:
            msg = '–ù–∞ —ç—Ç—É –¥–∞—Ç—É —É –Ω–∞—Å –Ω–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞.'
        conn.close()
        menu(query, msg)


def today(query, update):
    profile_list = registration_check(update.effective_user)
    if profile_list[0] == 'subscriber':
        conn = sqlite3.connect('admin_django/astro_db.db')
        c = conn.cursor()
        c.execute('SELECT text FROM data WHERE date=?;',
                  (datetime.now().strftime('%d.%m.%Y'),))
        msg = c.fetchone()
        if msg is not None:
            msg = msg[0]
        else:
            msg = '–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –ø—Ä–æ–≥–Ω–æ–∑ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω'
        conn.close()
        menu(query, msg)
    else:
        keyboard = [
            [InlineKeyboardButton("üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", callback_data='buy')],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='menu')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.edit_message_text(
            '–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!',
            reply_markup=reply_markup
            )


def info(query):
    conn = sqlite3.connect('admin_django/astro_db.db')
    c = conn.cursor()
    c.execute('SELECT "page_text" FROM "info" WHERE page_name="info";')
    msg = c.fetchone()
    msg = msg[0]
    conn.close()
    keyboard = [
            [
                InlineKeyboardButton("–ë–µ–∫—Ç–µ—Å—Ç", callback_data='backtest_info'),
                InlineKeyboardButton("–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑", callback_data='prognosis_info')
            ],
            [InlineKeyboardButton("–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑", callback_data='individual_info')],
            [InlineKeyboardButton("‚Ü©Ô∏è –í –º–µ–Ω—é", callback_data='menu')],
        ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(msg, reply_markup=reply_markup, parse_mode='HTML')


def backtest_info(query):
    conn = sqlite3.connect('admin_django/astro_db.db')
    c = conn.cursor()
    c.execute('SELECT "page_text" FROM "info" WHERE page_name="backtest";')
    msg = c.fetchone()
    msg = msg[0]
    conn.close()
    msg_points = msg.split('.')
    msg_send = ''
    for msg in msg_points:
        msg_send += msg
        query.edit_message_text(msg_send, parse_mode='HTML')
        time.sleep(3)
    menu(query, msg_send)


def prognosis_info(query):
    conn = sqlite3.connect('admin_django/astro_db.db')
    c = conn.cursor()
    c.execute('SELECT "page_text" FROM "info" WHERE page_name="prognosis";')
    msg = c.fetchone()
    msg = msg[0]
    conn.close()
    msg_points = msg.split('.')
    msg_send = ''
    for msg in msg_points:
        msg_send += msg
        query.edit_message_text(msg_send, parse_mode='HTML')
        time.sleep(3)
    menu(query, msg_send)


def individual_info(query):
    conn = sqlite3.connect('admin_django/astro_db.db')
    c = conn.cursor()
    c.execute('SELECT "page_text" FROM "info" WHERE page_name="individual";')
    msg = c.fetchone()
    msg = msg[0]
    conn.close()
    msg_points = msg.split(' ')
    msg_send = ''
    for msg in msg_points:
        msg_send += msg + ' '
        query.edit_message_text(msg_send, parse_mode='HTML')
        time.sleep(0.1)
    menu(query, msg_send)


def pay_url_generate(value, payment_code, user_id):
    quickpay = Quickpay(
            receiver="4100118665757287",
            quickpay_form="shop",
            targets=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ –ê—Å—Ç—Ä–æ Trade –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {value} ‚ÇΩ",
            paymentType="SB",
            sum=value,
            label=payment_code,
            successURL="https://web.telegram.org/k/#@Astropredikt_bot"
            )
    conn = sqlite3.connect('admin_django/astro_db.db')
    c = conn.cursor()
    c.execute(
        'INSERT INTO payments (user_id, payment_code, payment_status, value, href) VALUES (?, ?, ?, ?, ?)',
        (user_id, payment_code, '0', value, quickpay.redirected_url))
    conn.commit()
    conn.close()
    return quickpay.redirected_url


def pay_button(query, payment_code, payment_url):
    pay_list = payment_code.split('||')
    keyboard = [
            [InlineKeyboardButton("üí∏ –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã", url=payment_url)],
            [InlineKeyboardButton("üîé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—ã", callback_data='pay_check')],
            [InlineKeyboardButton("üÜî –ü—Ä–æ—Ñ–∏–ª—å", callback_data='profile')]
        ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(
        f'–í–∞—à–∞ –ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞! –†–µ–∫–≤–∏–∑–∏—Ç—ã –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ - "–°—á–µ—Ç –æ—Ç {pay_list[1]} –Ω–∞ —Å—É–º–º—É {pay_list[2]} ‚ÇΩ"',
        reply_markup=reply_markup
        )


def pay_check(query, update):
    profile_list = registration_check(update.effective_user)
    conn = sqlite3.connect('admin_django/astro_db.db')
    c = conn.cursor()
    c.execute(
        'SELECT payment_code, value, href FROM payments WHERE user_id=? AND payment_status="0";',
        (profile_list[3],)
    )
    rows = c.fetchall()
    if rows:
        payment_list = []
        for row in rows:
            payment_list.append(row)
        keyboard = [
                    [InlineKeyboardButton("üÜî –ü—Ä–æ—Ñ–∏–ª—å", callback_data='profile')],
                    [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='menu')],
                    ]
        for payment_item in payment_list:
            pay_list = payment_item[0].split('||')
            keyboard.insert(0, [InlineKeyboardButton(f'–°—á–µ—Ç –æ—Ç {pay_list[1]} –Ω–∞ —Å—É–º–º—É {pay_list[2]} ‚ÇΩ', callback_data=payment_item[0])])
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.edit_message_text(
            f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é:',
            reply_markup=reply_markup
            )
    else:
        keyboard = [
                    [InlineKeyboardButton("üÜî –ü—Ä–æ—Ñ–∏–ª—å", callback_data='profile')],
                    [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='menu')],
                    ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.edit_message_text(
            f'–£ –í–∞—Å –Ω–µ—Ç —Ç–µ–∫—É—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π',
            reply_markup=reply_markup
            )


def pay_check_target(query, update, label, value, payment_url):
    profile_list = registration_check(update.effective_user)
    pay_list = label.split('||')
    conn = sqlite3.connect('admin_django/astro_db.db')
    c = conn.cursor()
    UMONEY_TOKEN = os.getenv("UMONEY_TOKEN")
    client = Client(UMONEY_TOKEN)
    history = client.operation_history(label=label)
    if history.operations:
        if history.operations[0].status == 'success':
            c.execute('UPDATE payments SET payment_status="1" WHERE payment_code=?;', (label,))
            c.execute(
                'SELECT balance FROM users WHERE user_id=?;',
                (profile_list[3],)
            )
            old_value = c.fetchone()
            old_value = old_value[0]
            value = convert_to_int(value) + convert_to_int(old_value)
            c.execute('UPDATE users SET balance=? WHERE user_id=?;', (value, profile_list[3],))
            c.close()
            conn.commit()
            keyboard = [
                    [InlineKeyboardButton("üÜî –ü—Ä–æ—Ñ–∏–ª—å", callback_data='profile')],
                    [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='menu')],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query.edit_message_text(
                f'‚úÖ –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! (–°—á–µ—Ç –æ—Ç {pay_list[1]} –Ω–∞ —Å—É–º–º—É {pay_list[2]} ‚ÇΩ)',
                reply_markup=reply_markup
                )
        else:
            keyboard = [
            [InlineKeyboardButton("üÜî –ü—Ä–æ—Ñ–∏–ª—å", callback_data='profile')],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='menu')],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query.edit_message_text(
                f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ (–°—á–µ—Ç –æ—Ç {pay_list[1]} –Ω–∞ —Å—É–º–º—É {pay_list[2]} ‚ÇΩ)',
                reply_markup=reply_markup
                )
    else:
        keyboard = [
        [InlineKeyboardButton("üí∏ –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã", url=payment_url)],
        [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã", callback_data=f'delete_payment-{label}')],
        [InlineKeyboardButton("üÜî –ü—Ä–æ—Ñ–∏–ª—å", callback_data='profile')],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='menu')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.edit_message_text(
            f'–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∞ (–°—á–µ—Ç –æ—Ç {pay_list[1]} –Ω–∞ —Å—É–º–º—É {pay_list[2]} ‚ÇΩ)',
            reply_markup=reply_markup
            )
    conn.close()


def delete_payment(query, label):
    conn = sqlite3.connect('admin_django/astro_db.db')
    c = conn.cursor()
    c.execute(
        'DELETE FROM payments WHERE payment_code=?;',
        (label,)
    )
    conn.commit()
    conn.close()
    keyboard = [
        [InlineKeyboardButton("üÜî –ü—Ä–æ—Ñ–∏–ª—å", callback_data='profile')],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='menu')],
        ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(
        '–î–∞–Ω–Ω—ã–µ –ø–æ –æ–ø–ª–∞—Ç–µ —É–¥–∞–ª–µ–Ω—ã.',
        reply_markup=reply_markup
        )


def convert_to_int(value):
    if isinstance(value, str):
        try:
            return int(value)
        except ValueError:
            print(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å '{value}' –≤ int.")
            return None
    return value


def script(update, context):
    update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
    context.user_data['waiting_for_script'] = True


def apply_script(update, context):
    if 'waiting_for_script' in context.user_data and context.user_data['waiting_for_script']:
        profile_list = registration_check(update.effective_user)
        if profile_list[0] == 'admin':
            script = update.message.text
            if script == '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ':
                update.message.reply_text(f"–ó–∞–≥—Ä—É–∑–∏–ª –Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - –∏–∑–º–µ–Ω–µ–Ω–æ –∏–Ω—Ñ–æ, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, —Ç–µ—Å—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –≤–Ω—É—Ç—Ä–∏ –õ–ö –¥–ª—è –∞–¥–º–∏–Ω–∞")
            else:
                conn = sqlite3.connect('admin_django/astro_db.db')
                c = conn.cursor()
                c.execute(script)
                conn.commit()
                conn.close()
                update.message.reply_text(f"–°–∫—Ä–∏–ø—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:\n{script}")
        else:
            update.message.reply_text("–°–∫—Ä–∏–ø—Ç –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω, –í—ã –Ω–µ –∞–¥–º–∏–Ω.")
        del context.user_data['waiting_for_script']
    else:
        update.message.reply_text("–î–ª—è –æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")


def send_messages(context, user_ids, text):
    bot = context.bot
    for user_id in user_ids:
        try:
            bot.send_message(chat_id=user_id, text=text)
        except Exception as e:
            logger.info(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–∏—Å—å–º–∞ {user_id}: {str(e)}")


def error(update, context):
    logger.error(f'–û—à–∏–±–∫–∞! - {context.error}. Qerry –¥–ª—è –ø—Ä–æ—á—Ç–µ–Ω–∏—è - {update}')
    print(f'–û—à–∏–±–∫–∞! - {context.error}. Qerry –¥–ª—è –ø—Ä–æ—á—Ç–µ–Ω–∏—è - {update}')


async def post_init(updater):
    await updater.bot.set_my_commands([
        BotCommand("/start", "–í—ã–∑–æ–≤ –º–µ–Ω—é"),
    ])


def main():
    load_dotenv()
    BOT_TOKEN = os.getenv("BOT_TOKEN")
    updater = Updater(BOT_TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CallbackQueryHandler(commands))
    dp.add_handler(CommandHandler("script", script))
    dp.add_handler(MessageHandler(
        Filters.text & ~Filters.command,
        apply_script
        )
    )
    dp.add_error_handler(error)

    updater.start_polling()
    updater.idle()
    updater.loop.create_task(post_init(updater))


if __name__ == '__main__':
    logging.basicConfig(
        filename='bot.log',
        filemode='a',  # 'a' - –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –≤ —Ñ–∞–π–ª
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        level=logging.INFO
    )
    file_handler = logging.FileHandler('bot.log', 'a', 'utf-8')
    file_handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
    logging.getLogger().addHandler(file_handler)
    logger = logging.getLogger(__name__)
    user_ids = [605381950, 2038870658]
    main()
