from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, MessageHandler, Filters, CallbackContext, ConversationHandler
from collections import defaultdict

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
WAITING_FOR_INPUT = range(1)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
user_data_store = defaultdict(dict)

def start(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("üíé –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑", callback_data='individual')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=reply_markup)

def button(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –¥–∏–∞–ª–æ–≥—É –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
    if query.data == 'individual':
        query.edit_message_text(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
        return WAITING_FOR_INPUT

def receive_input(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    user_input = update.message.text
    user_data_store[user_id]['individual_input'] = user_input

    update.message.reply_text(f"–í–∞—à –≤–≤–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {user_input}")
    return ConversationHandler.END

def cancel(update: Update, context: CallbackContext):
    update.message.reply_text('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
    return ConversationHandler.END

def main():
    updater = Updater("6982950113:AAFB3undU2ditRkLlk0EdRmKtvCDrjl-zz0", use_context=True)

    # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(button, pattern='^individual$')],
        states={
            WAITING_FOR_INPUT: [MessageHandler(Filters.text & ~Filters.command, receive_input)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    updater.dispatcher.add_handler(CommandHandler('start', start))
    updater.dispatcher.add_handler(conv_handler)

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()